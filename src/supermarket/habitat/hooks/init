#!{{pkgPathFor "core/bash"}}/bin/bash -e

export HOME="{{pkg.svc_data_path}}"
. '{{pkg.svc_config_path}}/app_env.sh'

# Create a directory for each app symlinked dir under /hab/svc/supermarket/var
mkdir -pv '{{pkg.svc_var_path}}/log'
mkdir -pv '{{pkg.svc_var_path}}/tmp'
mkdir -pv '{{pkg.svc_var_path}}/public/system'

# TODO: Clean this up. Make sure supermarket account is created when binding
{{~#if bind.database}}
{{#with bind.database.first as |pg| ~}}
export PGPASSWORD={{pg.cfg.superuser_password}}
export PGUSER={{pg.cfg.superuser_name}}
export PGHOST={{pg.sys.ip}}
{{/with}}

# We always want to make sure the password is up to date, hence the additional alter
# Creating as superuser to make this work, as we needed a bit more than DB owner.
# This should get clamped down
psql -d postgres << EOF
CREATE USER {{cfg.db.user}} WITH SUPERUSER PASSWORD '{{cfg.db.password}}';
CREATE DATABASE {{cfg.db.name}} WITH OWNER = {{cfg.db.user}};
ALTER USER {{cfg.db.user}} WITH PASSWORD '{{cfg.db.password}}';
EOF
{{~/if}}

# Check that the 'SECRET_KEY_BASE' environment variable is non-empty
if [ -z "${SECRET_KEY_BASE:-}" ]; then
  >&2 echo "Required environment variable SECRET_KEY_BASE is not set."
  >&2 echo "Set this package's config setting 'secret_key_base' to a"
  >&2 echo "non-empty value. You can run 'rails secret' in development"
  >&2 echo "to generate a random key string."
  >&2 echo ""
  >&2 echo "Aborting..."
  exit 5
fi

# Confirm an initial database connection
if ! {{pkg.path}}/libexec/is_db_connected; then
  >&2 echo ""
  >&2 echo "A database connection is required for this app to properly boot."
  >&2 echo "Is the database not running or are the database connection"
  >&2 echo "credentials incorrect?"
  >&2 echo ""
{{~#if bind.database}}
  >&2 echo "This app started with a database bind and will discovery the"
  >&2 echo "hostname and port number in the Habitat ring."
  >&2 echo ""
  >&2 echo "There are 3 remaining config settings which must be set correctly:"
{{else}}
  >&2 echo "This app started without a database bind meaning that the"
  >&2 echo "database is assumed to be running outside of a Habitat ring."
  >&2 echo "Therefore, you must provide all the database connection values."
  >&2 echo ""
  >&2 echo "There are 5 config settings which must be set correctly:"
{{~/if}}
  >&2 echo ""
{{~#unless bind.database}}
  >&2 echo " * db.host      - The database hostname or IP address (Current: {{#if cfg.db.host}}{{cfg.db.host}}{{else}}<unset>{{/if}})"
  >&2 echo " * db.port      - The database listen port number (Current: {{#if cfg.db.port}}{{cfg.db.port}}{{else}}5432{{/if}})"
{{~/unless}}
  >&2 echo " * db.adapter   - The database adapter (Current: {{#if cfg.db.adapter}}{{cfg.db.adapter}}{{else}}postgresql{{/if}})"
  >&2 echo " * db.user      - The database username (Current: {{#if cfg.db.user}}{{cfg.db.user}}{{else}}<unset>{{/if}})"
  >&2 echo " * db.password  - The database password (Current: {{#if cfg.db.password}}<set>{{else}}<unset>{{/if}})"
  >&2 echo " * db.name      - The database name (Current: {{#if cfg.db.name}}{{cfg.db.name}}{{else}}<unset>{{/if}})"
  >&2 echo ""
  >&2 echo "Aborting..."
  exit 15
fi

### Supermarket-y things here
supermarket-rake db:migrate
